<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Winterdom.BizTalk.PipelineTesting</name>
    </assembly>
    <members>
        <member name="T:Winterdom.BizTalk.PipelineTesting.BasePipelineWrapper">
            <summary>
            Wrapper around a pipeline you can execute
            </summary>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.BasePipelineWrapper.#ctor(Microsoft.Test.BizTalk.PipelineObjects.IPipeline,System.Boolean)">
            <summary>
            Initializes an instance
            </summary>
            <param name="pipeline">Pipeline object to wrap</param>
            <param name="isReceivePipeline">True if it's a receive pipeline</param>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.BasePipelineWrapper.AddComponent(Microsoft.BizTalk.Component.Interop.IBaseComponent,Winterdom.BizTalk.PipelineTesting.PipelineStage)">
            <summary>
            Adds a component to the specified stage
            </summary>
            <param name="component">Component to add to the stage</param>
            <param name="stage">Stage to add it to</param>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.BasePipelineWrapper.AddDocSpec(System.Type)">
            <summary>
            Adds a new document specification to the list
            of Known Schemas for this pipeline.
            </summary>
            <remarks>
            Adding known schemas is necessary so that
            document type resolution works in the disassembler/assembler
            stages
            </remarks>
            <param name="schemaType">Type of the document schema to add</param>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.BasePipelineWrapper.AddDocSpec(System.String,System.String)">
            <summary>
            Adds a new document specification to the list
            of Known Schemas for this pipeline.
            </summary>
            <remarks>
            Adding known schemas is necessary so that
            document type resolution works in the disassembler/assembler
            stages. Notice that this overload does NOT do automatic checking
            for multiple roots.
            </remarks>
            <param name="typeName">The fully qualified (namespace.class) name of 
            the schema</param>
            <param name="assemblyName">The partial or full name of the assembly
            containing the schema</param>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.BasePipelineWrapper.GetKnownDocSpecByName(System.String)">
            <summary>
            Returns the document spec object for a known doc
            spec given the fully qualified type name
            </summary>
            <param name="name">Typename of the schema</param>
            <returns>The docSpec object</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.BasePipelineWrapper.GetKnownDocSpecByType(System.String)">
            <summary>
            Returns the document spec object for a known doc
            spec given the name of the root (namespace#root)
            </summary>
            <param name="name">Name of the root</param>
            <returns>The docSpec object</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.BasePipelineWrapper.EnableTransactions">
            <summary>
            Enables transactional support for the pipeline
            execution, so that the pipeline context
            returns a valid transaction
            </summary>
            <returns>An object to control the transaction lifetime and result</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.BasePipelineWrapper.GetComponent(Winterdom.BizTalk.PipelineTesting.PipelineStage,System.Int32)">
            <summary>
            Looks up a component in the pipeline
            </summary>
            <param name="stage">The stage the component is in</param>
            <param name="index">The 0-based index inside the stage</param>
            <returns>The component, or null if it was not found</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.BasePipelineWrapper.ApplyInstanceConfig(System.String)">
            <summary>
            Apply per-instance pipeline configuration
            </summary>
            <param name="file">Path to the XML file with the configuration</param>
            <remarks>
            Per-instance pipeline configuration uses the same XML format used
            by the BizTalk Admin console that gets exported to binding files,
            for example, in the &lt;SendPipelineData&gt; element
            </remarks>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.BasePipelineWrapper.ApplyInstanceConfig(System.Xml.XmlReader)">
            <summary>
            Apply per-instance pipeline configuration
            </summary>
            <param name="reader">XML reader with the configuration</param>
            <remarks>
            Per-instance pipeline configuration uses the same XML format used
            by the BizTalk Admin console that gets exported to binding files,
            for example, in the &lt;SendPipelineData&gt; element
            </remarks>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.BasePipelineWrapper.FindStage(Winterdom.BizTalk.PipelineTesting.PipelineStage)">
            <summary>
            Finds a stage in the pipeline
            </summary>
            <param name="stage">Stage definition</param>
            <returns>The stage, if found, or a new stage if necessary</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.BasePipelineWrapper.CreatePipelineContext">
            <summary>
            Creates a new pipeline context for the execution
            </summary>
            <returns>The new pipeline context.</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.BasePipelineWrapper.GetSchemaRoots(System.Type)">
            <summary>
            Gets the namespace#root name for a schema.
            If the schema has multiple roots, all are returned.
            </summary>
            <param name="schemaType">Type of the schema</param>
            <returns>Roots of the schema</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.BasePipelineWrapper.GetSchemaRoot(System.Type)">
            <summary>
            Gets the root name (namespace#root) for a schema type
            </summary>
            <param name="schemaType">Type of the schema</param>
            <returns>Roots of the schema</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.BasePipelineWrapper.AddDocSpecToContext(Microsoft.BizTalk.Component.Interop.IDocumentSpec)">
            <summary>
            Adds a document specification to the context
            </summary>
            <param name="docSpec">Specification to add</param>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.BasePipelineWrapper.ApplyComponentConfig(System.Guid,System.String,System.Int32,System.Xml.XmlReader)">
            <summary>
            Applies the loaded configuration to a component
            </summary>
            <param name="stageId">The stage the component is in</param>
            <param name="name">The component name</param>
            <param name="index">The index of the component within the pipeline</param>
            <param name="reader">The per-instance configuration</param>
        </member>
        <member name="P:Winterdom.BizTalk.PipelineTesting.BasePipelineWrapper.GroupSigningCertificate">
            <summary>
            Gets or Set the thumbprint for the Group
            Signing Certificate. Null by default
            </summary>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.InstConfigPropertyBag">
            <summary>
            IPropertyBag implementation for per-instance
            pipeline config
            </summary>
            <example><![CDATA[
            <Properties>
              <AddXmlDeclaration vt="11">0</AddXmlDeclaration>
              <PreserveBom vt="11">0</PreserveBom>
            </Properties>
            ]]></example>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.InstConfigPropertyBag.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance from the config XML
            </summary>
            <param name="reader">The Xml reader to read from</param>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.InstConfigPropertyBag.Read(System.String)">
            <summary>
            Helper function to read an property (used by tests)
            </summary>
            <param name="propname">Name of the property to read</param>
            <returns>The property value, or null if not found</returns>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.NullEventStream">
            <summary>
            EventStream subclass that doesn't do anything
            </summary>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.Simple.Assembler">
            <summary>
            Factory class for standard assembler components
            </summary>
            <remarks>
            The Assembler class makes it easy to create standard
            assembler components and configure them with the proper
            document specifications (schema) and other properties before
            adding them to an empty pipeline; without having to reference
            assemblies like Microsoft.BizTalk.Component.Utilities, which
            are only located in the GAC.
            </remarks>
            <example><![CDATA[
            XmlAssembler xml = Assembler.Xml()
              .WithDocumentSpec<MySchema>()
              .WithPreserveBom(true);
            //...
            SendPipelineWrapper pipeline = Pipelines.Send().WithAssembler(xml);
            ]]>
            </example>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.Assembler.Xml">
            <summary>
            Creates a new XML Assembler component
            </summary>
            <returns>The Xml assembler</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.Assembler.FlatFile">
            <summary>
            Creates a new Flat File Assembler component
            </summary>
            <returns>The flat file assembler</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.Assembler.End">
            <summary>
            Returns the actual pipeline component
            created once you've configured it as necessary
            </summary>
            <returns>The IBaseComponent object</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.Assembler.AddSchema(System.Type)">
            <summary>
            Adds a Schema to the list of known 
            schemas by this component. Schemas added here
            will be passed to the pipeline context
            </summary>
            <param name="schemaType">Schema to add</param>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.Simple.FFDisassembler">
            <summary>
            Creates and configures a Flat File disassembler component
            </summary>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.Simple.Disassembler">
            <summary>
            Factory class for standard disassembler components
            </summary>
            <remarks>
            The Disassembler class makes it easy to create standard
            disassembler components and configure them with the proper
            document specifications (schema) and other properties before
            adding them to an empty pipeline; without having to reference
            assemblies like Microsoft.BizTalk.Component.Utilities, which
            are only located in the GAC.
            </remarks>
            <example><![CDATA[
            XmlDisassembler xml = Disassembler.Xml()
              .WithDocumentSpec<MySchema>()
              .WithValidation(true);
            //...
            ReceivePipelineWrapper pipeline = Pipelines.Receive().WithDisassembler(xml);
            ]]>
            </example>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.Disassembler.Xml">
            <summary>
            Creates a new XML Disassembler component
            </summary>
            <returns>The Xml disassembler</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.Disassembler.FlatFile">
            <summary>
            Creates a new Flat File Disassembler component
            </summary>
            <returns>The flat file disassembler</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.Disassembler.End">
            <summary>
            Returns the actual pipeline component
            created once you've configured it as necessary
            </summary>
            <returns>The IBaseComponent object</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.Disassembler.AddSchema(System.Type)">
            <summary>
            Adds a Schema to the list of known 
            schemas by this component. Schemas added here
            will be passed to the pipeline context
            </summary>
            <param name="schemaType">Schema to add</param>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.FFDisassembler.WithDocumentSpec(System.Type)">
            <summary>
            Sets the document specification (Schema) to use for 
            assembling
            </summary>
            <param name="schemaType">The BizTalk Schema Type</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.FFDisassembler.WithDocumentSpec``1">
            <summary>
            Sets the document specification (Schema) to use for 
            assembling
            </summary>
            <typeparam name="T">The BizTalk Schema type</typeparam>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.FFDisassembler.WithHeaderSpec(System.Type)">
            <summary>
            Sets the Header schema to use for assembling
            </summary>
            <param name="schemaType">The BizTalk Schema type</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.FFDisassembler.WithHeaderSpec``1">
            <summary>
            Sets the Header schema to use for assembling
            </summary>
            <typeparam name="T">The BizTalk Schema type</typeparam>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.FFDisassembler.WithTrailerSpec(System.Type)">
            <summary>
            Sets the footer schema to use when assembling
            </summary>
            <param name="schemaType">The BizTalk Schema type</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.FFDisassembler.WithTrailerSpec``1">
            <summary>
            Sets the footer schema to use when assembling
            </summary>
            <typeparam name="T">The BizTalk Schema type</typeparam>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.FFDisassembler.WithValidation(System.Boolean)">
            <summary>
            Configures the component to validate the incoming
            document against the schema
            </summary>
            <param name="validateMessage">If true, validate the message</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.FFDisassembler.WithRecoverableInterchange(System.Boolean)">
            <summary>
            Configures the component to use recoverable 
            interchange processing
            </summary>
            <param name="withRip">If true, do a recoverable interchange</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.FFDisassembler.WithPreserveHeader(System.Boolean)">
            <summary>
            Configures the component to preserve the message header
            </summary>
            <param name="preserveHeader">If true, preserve the message header</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.FFDisassembler.End">
            <summary>
            Returns the constructed component
            </summary>
            <returns>The Flat File assembler</returns>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.Simple.SchemaTester`1">
            <summary>
            Makes it easier to do basic testing of BizTalk schema
            parsing and assembling functionality.
            </summary>
            <remarks>
            SchemaTester works by creating a dynamic pipeline with
            either the XML or Flat File components and running your
            input documents through it.
            </remarks>
            <typeparam name="T">The BizTalk Schema to use</typeparam>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.SchemaTester`1.ParseFF(System.IO.Stream)">
            <summary>
            Parses stream using the Flat File 
            disassembler and the specified schema.
            </summary>
            <param name="inputDocument">Contains the flat file to parse</param>
            <returns>The resulting XML output from the parsing</returns>
            <remarks>
            Use <c ref='ErrorHelper.GetErrorMessage'/> to
            get detailed error information when parsing fails.
            </remarks>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.SchemaTester`1.ParseFF(System.String,System.String)">
            <summary>
            Parses the file using the Flat File 
            disassembler and the specified schema and writes the result
            to another file
            </summary>
            <param name="inputPath">Path to the flat file to parse</param>
            <param name="outputPath">File to write output to</param>
            <remarks>
            Use <c ref='ErrorHelper.GetErrorMessage'/> to
            get detailed error information when parsing fails.
            </remarks>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.SchemaTester`1.ParseXml(System.IO.Stream)">
            <summary>
            Parses a stream using the XML disassembler with
            the specified schema and validation enabled.
            </summary>
            <param name="inputDocument">Contains the XML doc to parse</param>
            <returns>The resulting parsed XML tree</returns>
            <remarks>
            Use <c ref='ErrorHelper.GetErrorMessage'/> to
            get detailed error information when parsing fails.
            </remarks>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.SchemaTester`1.ParseXml(System.String,System.String)">
            <summary>
            Parses a file using the XML disassembler with
            the specified schema and validation enabled, and writes
            the result to another file
            </summary>
            <param name="inputPath">The path to the XML doc to parse</param>
            <param name="outputPath">The path to write the results to</param>
            <remarks>
            Use <c ref='ErrorHelper.GetErrorMessage'/> to
            get detailed error information when parsing fails.
            </remarks>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.SchemaTester`1.AssembleFF(System.IO.Stream)">
            <summary>
            Generates a flat file from an XML document with the
            specified schema
            </summary>
            <param name="inputDocument">The XML document</param>
            <returns>The generated flat file</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.SchemaTester`1.AssembleFF(System.String,System.String)">
            <summary>
            Generates a flat file from an XML document with the
            specified schema and writes the result to another file
            </summary>
            <param name="inputPath">The path to the XML document</param>
            <param name="outputPath">The path to write the output flat file to</param>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.SchemaTester`1.AssembleXml(System.IO.Stream)">
            <summary>
            Generates an XML file from an XML document with the
            specified schema
            </summary>
            <param name="inputDocument">The XML document</param>
            <returns>The generated XML</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.SchemaTester`1.AssembleXml(System.String,System.String)">
            <summary>
            Generates an XML file from an XML document with the
            specified schema
            </summary>
            <param name="inputPath">The path to the XML document</param>
            <param name="outputPath">The path to write the output to</param>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.Simple.ErrorHelper">
            <summary>
            Helper class to extract detailed error information
            from parsing exceptions thrown by <c ref='SchemaTester'/> methods.
            </summary>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.ErrorHelper.GetErrorMessage(System.Exception)">
            <summary>
            Extracts a detailed error message from the specified exception.
            </summary>
            <param name="ex">Exception to examine</param>
            <returns>The error message</returns>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.Simple.XmlDisassembler">
            <summary>
            Creates and configures an XML disassembler component.
            </summary>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.XmlDisassembler.WithDocumentSpec(System.Type)">
            <summary>
            Adds a new Document Specification (Schema) to the 
            component configuration
            </summary>
            <param name="schemaType">The BizTalk schema type</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.XmlDisassembler.WithDocumentSpec``1">
            <summary>
            Adds a new Document Specification (Schema) to the 
            component configuration
            </summary>
            <typeparam name="T">The BizTalk Schema Type</typeparam>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.XmlDisassembler.WithEnvelopeSpec(System.Type)">
            <summary>
            Adds an new Envelope Specification (Schema) to the
            component configuration
            </summary>
            <param name="schemaType">The BizTalk Schema type</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.XmlDisassembler.WithEnvelopeSpec``1">
            <summary>
            Adds an new Envelope Specification (Schema) to the
            component configuration
            </summary>
            <typeparam name="T">The BizTalk Schema type</typeparam>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.XmlDisassembler.WithValidation(System.Boolean)">
            <summary>
            Configures the component to validate the incoming
            document against the schema
            </summary>
            <param name="validateMessage">If true, validate the message</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.XmlDisassembler.WithRecoverableInterchange(System.Boolean)">
            <summary>
            Configures the component to use recoverable 
            interchange processing
            </summary>
            <param name="withRip">If true, do a recoverable interchange</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.XmlDisassembler.AllowUnrecognized(System.Boolean)">
            <summary>
            Configures the component to allow unrecognized messages
            </summary>
            <param name="allow">If true, allows messages without schema</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.XmlDisassembler.End">
            <summary>
            Return the constructed component
            </summary>
            <returns>The XmlDasmComp component</returns>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.Simple.FFAssembler">
            <summary>
            Creates and configures a Flat File Assembler component
            </summary>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.FFAssembler.WithDocumentSpec(System.Type)">
            <summary>
            Sets the document specification (Schema) to use for 
            assembling
            </summary>
            <param name="schemaType">The BizTalk Schema Type</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.FFAssembler.WithDocumentSpec``1">
            <summary>
            Sets the document specification (Schema) to use for 
            assembling
            </summary>
            <typeparam name="T">The BizTalk Schema type</typeparam>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.FFAssembler.WithHeaderSpec(System.Type)">
            <summary>
            Sets the Header schema to use for assembling
            </summary>
            <param name="schemaType">The BizTalk Schema type</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.FFAssembler.WithHeaderSpec``1">
            <summary>
            Sets the Header schema to use for assembling
            </summary>
            <typeparam name="T">The BizTalk Schema type</typeparam>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.FFAssembler.WithTrailerSpec(System.Type)">
            <summary>
            Sets the footer schema to use when assembling
            </summary>
            <param name="schemaType">The BizTalk Schema type</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.FFAssembler.WithTrailerSpec``1">
            <summary>
            Sets the footer schema to use when assembling
            </summary>
            <typeparam name="T">The BizTalk Schema type</typeparam>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.FFAssembler.WithPreserveBom(System.Boolean)">
            <summary>
            Configures whether to put a Byte-Order Mark (BOM)
            on the resulting message
            </summary>
            <param name="preserveBom">If true, add a BOM</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.FFAssembler.End">
            <summary>
            Returns the constructed component
            </summary>
            <returns>The Flat File assembler</returns>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.Simple.XmlAssembler">
            <summary>
            Creates and configures an XML assembler component.
            </summary>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.XmlAssembler.WithDocumentSpec(System.Type)">
            <summary>
            Adds a new Document Specification (Schema) to the 
            component configuration
            </summary>
            <param name="schemaType">The BizTalk schema type</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.XmlAssembler.WithDocumentSpec``1">
            <summary>
            Adds a new Document Specification (Schema) to the 
            component configuration
            </summary>
            <typeparam name="T">The BizTalk Schema Type</typeparam>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.XmlAssembler.WithEnvelopeSpec(System.Type)">
            <summary>
            Adds an new Envelope Specification (Schema) to the
            component configuration
            </summary>
            <param name="schemaType">The BizTalk Schema type</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.XmlAssembler.WithEnvelopeSpec``1">
            <summary>
            Adds an new Envelope Specification (Schema) to the
            component configuration
            </summary>
            <typeparam name="T">The BizTalk Schema type</typeparam>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.XmlAssembler.WithXmlDeclaration(System.Boolean)">
            <summary>
            Configures the component to add the XML declaration
            to the resulting message
            </summary>
            <param name="addXmlDeclaration">If true, add the XML declaration</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.XmlAssembler.WithPreserveBom(System.Boolean)">
            <summary>
            Configures the component to preserve a Byte Order Mark (BOM)
            in the outgoing message
            </summary>
            <param name="preserveBom">If true, add a BOM</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.XmlAssembler.End">
            <summary>
            Return the constructed component
            </summary>
            <returns>The XmlAsmComp component</returns>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.Simple.ReceivePipelineBuilder">
            <summary>
            Constructs a new ReceivePipelineWrapper object
            </summary>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.ReceivePipelineBuilder.End">
            <summary>
            Finishes construction
            </summary>
            <returns>The pipeline wrapper object</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.ReceivePipelineBuilder.op_Implicit(Winterdom.BizTalk.PipelineTesting.Simple.ReceivePipelineBuilder)~Winterdom.BizTalk.PipelineTesting.ReceivePipelineWrapper">
            <summary>
            Converts this builder to the actual pipeline
            wrapper object; making it unnecessary to call
            End() directly.
            </summary>
            <param name="builder">The builder object</param>
            <returns>The pipeline wrapper object</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.ReceivePipelineBuilder.WithDecoder(Microsoft.BizTalk.Component.Interop.IBaseComponent)">
            <summary>
            Adds a pipeline component to the decode stage
            </summary>
            <param name="decoder">The component to add</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.ReceivePipelineBuilder.WithDisassembler(Microsoft.BizTalk.Component.Interop.IBaseComponent)">
            <summary>
            Adds a pipeline component to the disassembling stage
            </summary>
            <param name="disassembler">The component to add</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.ReceivePipelineBuilder.WithDisassembler(Winterdom.BizTalk.PipelineTesting.Simple.Disassembler)">
            <summary>
            Adds a pipeline component to the disassembling stage
            </summary>
            <param name="disassembler">The component to add</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.ReceivePipelineBuilder.WithValidator(Microsoft.BizTalk.Component.Interop.IBaseComponent)">
            <summary>
            Adds a pipeline component to the validating stage
            </summary>
            <param name="validator">The component to add</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.ReceivePipelineBuilder.WithPartyResolver(Microsoft.BizTalk.Component.Interop.IBaseComponent)">
            <summary>
            Adds a pipeline component to the party resolution stage
            </summary>
            <param name="resolver">The component to add</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.ReceivePipelineBuilder.WithSpec(System.Type)">
            <summary>
            Adds a document specification (schema) to the pipeline
            </summary>
            <param name="docSpecType">The schema type</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.ReceivePipelineBuilder.WithSpec(System.String,System.String)">
            <summary>
            Adds a document specification (schema) to the pipeline
            </summary>
            <param name="typeName">The fully qualified (namespace.class) name of 
            the schema</param>
            <param name="assemblyName">The partial or full name of the assembly
            containing the schema</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.ReceivePipelineBuilder.WithSpec``1">
            <summary>
            Adds a document specification (schema) to the pipeline
            </summary>
            <typeparam name="T">The schema type</typeparam>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.ReceivePipelineBuilder.WithCertificate(System.String)">
            <summary>
            Configures the pipeline with a Group Signing Certificate
            </summary>
            <param name="certificate">The certificate thumbprint</param>
            <returns>This instance </returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.ReceivePipelineBuilder.WithInstanceConfig(System.String)">
            <summary>
            Applies per-instance configuration to the pipeline
            </summary>
            <param name="file">XML file with the configuration</param>
            <returns>The configured pipeline</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.ReceivePipelineBuilder.WithInstanceConfig(System.Xml.XmlReader)">
            <summary>
            Applies per-instance configuration to the pipeline
            </summary>
            <param name="reader">XML reader with the configuration</param>
            <returns>The configured pipeline</returns>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.Simple.SendPipelineBuilder">
            <summary>
            Constructs a new SendPipelineWrapper object
            </summary>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.SendPipelineBuilder.End">
            <summary>
            Finishes construction
            </summary>
            <returns>The pipeline wrapper object</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.SendPipelineBuilder.op_Implicit(Winterdom.BizTalk.PipelineTesting.Simple.SendPipelineBuilder)~Winterdom.BizTalk.PipelineTesting.SendPipelineWrapper">
            <summary>
            Converts this builder to the actual pipeline
            wrapper object; making it unnecessary to call
            End() directly.
            </summary>
            <param name="builder">The builder object</param>
            <returns>The pipeline wrapper object</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.SendPipelineBuilder.WithEncoder(Microsoft.BizTalk.Component.Interop.IBaseComponent)">
            <summary>
            Adds a pipeline component to the Encode stage
            </summary>
            <param name="encoder">The component to add</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.SendPipelineBuilder.WithAssembler(Microsoft.BizTalk.Component.Interop.IBaseComponent)">
            <summary>
            Adds a pipeline component to the Assemble stage
            </summary>
            <param name="assembler">The component to add</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.SendPipelineBuilder.WithAssembler(Winterdom.BizTalk.PipelineTesting.Simple.Assembler)">
            <summary>
            Adds an Assembler component to the pipeline
            </summary>
            <param name="assembler">The component to add</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.SendPipelineBuilder.WithPreAssembler(Microsoft.BizTalk.Component.Interop.IBaseComponent)">
            <summary>
            Adds a pipeline component to the preassemble stage
            </summary>
            <param name="preAssembler">The compononent to add</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.SendPipelineBuilder.WithSpec(System.Type)">
            <summary>
            Adds a document specification (schema) to the pipeline
            </summary>
            <param name="docSpecType">The schema type</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.SendPipelineBuilder.WithSpec(System.String,System.String)">
            <summary>
            Adds a document specification (schema) to the pipeline
            </summary>
            <param name="typeName">The fully qualified (namespace.class) name of 
            the schema</param>
            <param name="assemblyName">The partial or full name of the assembly
            containing the schema</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.SendPipelineBuilder.WithSpec``1">
            <summary>
            Adds a document specification (schema) to the pipeline
            </summary>
            <typeparam name="T">The schema type</typeparam>
            <returns>This instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.SendPipelineBuilder.WithCertificate(System.String)">
            <summary>
            Configures the pipeline with a Group Signing Certificate
            </summary>
            <param name="certificate">The certificate thumbprint</param>
            <returns>This instance </returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.SendPipelineBuilder.WithInstanceConfig(System.String)">
            <summary>
            Applies per-instance configuration to the pipeline
            </summary>
            <param name="file">XML file with the configuration</param>
            <returns>The configured pipeline</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.SendPipelineBuilder.WithInstanceConfig(System.Xml.XmlReader)">
            <summary>
            Applies per-instance configuration to the pipeline
            </summary>
            <param name="reader">XML reader with the configuration</param>
            <returns>The configured pipeline</returns>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.Simple.XmlPipelines">
            <summary>
            Creates instances of the standard XML pipelines in BizTalk.
            </summary>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.XmlPipelines.Send">
            <summary>
            Creates a new XMLTransmit pipeline
            </summary>
            <returns>The Pipeline Builder instance</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.XmlPipelines.Receive">
            <summary>
            Creates a new XMLReceive pipeline
            </summary>
            <returns>The Pipeline Builder instance</returns>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.Simple.Pipelines">
            <summary>
            Simple interface for creating pipelines
            </summary>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.Pipelines.Send">
            <summary>
            Prepares a new Send pipeline for construction
            </summary>
            <returns>A pipeline builder</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.Pipelines.Send(System.Type)">
            <summary>
            Creates a new send pipeline with an explicit type
            </summary>
            <param name="type">The pipeline type</param>
            <returns>A pipeline builder</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.Pipelines.Send``1">
            <summary>
            Creates a new send pipeline with an explicit type
            as a generic parameter
            </summary>
            <typeparam name="T">The pipeline type</typeparam>
            <returns>A pipeline builder</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.Pipelines.Receive">
            <summary>
            Prepares a new Receive pipeline for construction
            </summary>
            <returns>A pipeline builder</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.Pipelines.Receive(System.Type)">
            <summary>
            Creates a new receive pipeline with an explicit
            type parameter
            </summary>
            <param name="type">The pipeline type</param>
            <returns>A pipeline Builder</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.Simple.Pipelines.Receive``1">
            <summary>
            Creates a new receive pipeline with an explicit
            generic type parameter
            </summary>
            <typeparam name="T">The pipeline type</typeparam>
            <returns>A pipeline builder</returns>
        </member>
        <member name="P:Winterdom.BizTalk.PipelineTesting.Simple.Pipelines.Xml">
            <summary>
            Standard BizTalk XML pipelines
            </summary>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.TransactionControl">
            <summary>
            Controls the lifetime and result of a 
            pipeline transaction.
            </summary>
            <remarks>
            Using it is similar to using a TransactionScope object.
            </remarks>
            <example><![CDATA[
            using ( TransactionControl control = pipeline.EnableTransactions() )
            {
               // do stuff
               control.SetComplete(); // commit transaction if all ok
            }
            ]]></example>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.TransactionControl.SetComplete">
            <summary>
            Marks the transaction to attempt to commit
            during disposal.
            </summary>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.TransactionControl.Dispose">
            <summary>
            Remove the transaction context and attempt
            to commit or rollback the transaction.
            </summary>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.IConfigurePipelineContext">
            <summary>
            Interface used to configure and update
            the pipeline context mock object
            </summary>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.PipelineContext">
            <summary>
            Mock class that represents the pipeline
            execution context.
            </summary>
            <remarks>
            We mock this class explicitly in order to implement
            some functionality that the PipelineObjects library currently
            does not implement, including Transaction and Certificate object 
            support
            </remarks>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.PipelineContext.GetDocumentSpecByName(System.String)">
            <summary>
            Finds a document specification for a schema added
            to the context
            </summary>
            <param name="docSpecName">CLR type name of the schema</param>
            <returns>The document spec, if it exists</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.PipelineContext.GetDocumentSpecByType(System.String)">
            <summary>
            Finds a document specification for a schema added
            to the context
            </summary>
            <param name="docType">The XML namespace#root of the schema</param>
            <returns>The document spec, if it exists</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.PipelineContext.GetEventStream">
            <summary>
            Gets the BAM Event Stream for the pipeline.
            </summary>
            <returns>An empty stream</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.PipelineContext.GetGroupSigningCertificate">
            <summary>
            Gets the thumbprint of the X.509 group
            signing certificate
            </summary>
            <returns>The certificate thumbprint, or null</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.PipelineContext.GetMessageFactory">
            <summary>
            Gets the message factory object
            </summary>
            <returns>The mesage factory</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.PipelineContext.GetTransaction">
            <summary>
            Gets the transaction object associated with the process
            </summary>
            <returns>The ITransaction object</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.PipelineContext.AddDocSpecByName(System.String,Microsoft.BizTalk.Component.Interop.IDocumentSpec)">
            <summary>
            Adds a new document specification to the context
            </summary>
            <param name="name">CLR Type name</param>
            <param name="documentSpec">Document Spec</param>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.PipelineContext.AddDocSpecByType(System.String,Microsoft.BizTalk.Component.Interop.IDocumentSpec)">
            <summary>
            Adds a new document specification to the context
            </summary>
            <param name="type">XML namespace#root</param>
            <param name="documentSpec">Document Spec</param>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.PipelineContext.SetAuthenticationRequiredOnReceivePort(System.Boolean)">
            <summary>
            Configures the AuthenticationRequiredOnReceivePort option
            </summary>
            <param name="value">New value</param>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.PipelineContext.SetGroupSigningCertificate(System.String)">
            <summary>
            Sets the group signing certificate to use
            </summary>
            <param name="certificate">The certificate thumbprint</param>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.PipelineContext.EnableTransactionSupport">
            <summary>
            Enables a transaction for the pipeline execution
            </summary>
            <returns>Object to control the transaction lifetime</returns>
        </member>
        <member name="P:Winterdom.BizTalk.PipelineTesting.PipelineContext.ComponentIndex">
            <summary>
            Index of the currently executing component
            </summary>
        </member>
        <member name="P:Winterdom.BizTalk.PipelineTesting.PipelineContext.PipelineID">
            <summary>
            ID of the currently executing pipeline
            </summary>
        </member>
        <member name="P:Winterdom.BizTalk.PipelineTesting.PipelineContext.PipelineName">
            <summary>
            The pipeline name
            </summary>
        </member>
        <member name="P:Winterdom.BizTalk.PipelineTesting.PipelineContext.ResourceTracker">
            <summary>
            The Resource Tracker object associated with this pipeline
            </summary>
        </member>
        <member name="P:Winterdom.BizTalk.PipelineTesting.PipelineContext.StageID">
            <summary>
            The ID of the stage currently executing
            </summary>
        </member>
        <member name="P:Winterdom.BizTalk.PipelineTesting.PipelineContext.StageIndex">
            <summary>
            The Index of the stage currently executing
            </summary>
        </member>
        <member name="P:Winterdom.BizTalk.PipelineTesting.PipelineContext.AuthenticationRequiredOnReceivePort">
            <summary>
            If true, indicates authentication on the 
            receive port was enabled
            </summary>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.DocSpecLoader">
            <summary>
            This class does the bulk of the work in loading
            document specifications (DocSpecs).
            </summary>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.DocSpecLoader.LoadDocSpec(System.Type)">
            <summary>
            Creates a document specification from a CLR
            Type representing the root node of a BizTalk
            compiled Schema
            </summary>
            <param name="schemaType">The schema to create</param>
            <returns>The document specification object</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.DocSpecLoader.LoadDocSpec(System.String,System.String)">
            <summary>
            Creates a document specification from a CLR
            Type based on its name and containing assembly
            </summary>
            <param name="typeName">The fully qualified (namespace.class) name of 
            the schema</param>
            <param name="assemblyName">The partial or full name of the assembly
            containing the schema</param>
            <returns>The document specification object</returns>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.MessageCollection">
            <summary>
            Represents a collection of IBaseMessage
            objects
            </summary>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.MessageCollection.AddRange(System.Collections.Generic.IEnumerable{Microsoft.BizTalk.Message.Interop.IBaseMessage})">
            <summary>
            Adds multiple messages to this collection
            </summary>
            <param name="list">List of messages to add</param>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.PipelineStage">
            <summary>
            Represents a stage in a pipeline
            where you can add components
            </summary>
        </member>
        <member name="F:Winterdom.BizTalk.PipelineTesting.PipelineStage.Decode">
            <summary>
            Decode stage of receive pipelines
            </summary>
        </member>
        <member name="F:Winterdom.BizTalk.PipelineTesting.PipelineStage.Disassemble">
            <summary>
            Disassemble stage of receive pipelines
            </summary>
        </member>
        <member name="F:Winterdom.BizTalk.PipelineTesting.PipelineStage.Validate">
            <summary>
            Validation stage of receive pipelines
            </summary>
        </member>
        <member name="F:Winterdom.BizTalk.PipelineTesting.PipelineStage.ResolveParty">
            <summary>
            Party Resolution stage of receive pipelines
            </summary>
        </member>
        <member name="F:Winterdom.BizTalk.PipelineTesting.PipelineStage.PreAssemble">
            <summary>
            Pre-Assemble stage of send pipelines
            </summary>
        </member>
        <member name="F:Winterdom.BizTalk.PipelineTesting.PipelineStage.Assemble">
            <summary>
            Assemble stage of receive pipelines
            </summary>
        </member>
        <member name="F:Winterdom.BizTalk.PipelineTesting.PipelineStage.Encode">
            <summary>
            Encode stage of receive pipelines
            </summary>
        </member>
        <member name="P:Winterdom.BizTalk.PipelineTesting.PipelineStage.ID">
            <summary>
            ID of the pipeline Stage
            </summary>
        </member>
        <member name="P:Winterdom.BizTalk.PipelineTesting.PipelineStage.Name">
            <summary>
            Name of the stage
            </summary>
        </member>
        <member name="P:Winterdom.BizTalk.PipelineTesting.PipelineStage.ExecuteMethod">
            <summary>
            ExecuteMethod of the stage
            </summary>
        </member>
        <member name="P:Winterdom.BizTalk.PipelineTesting.PipelineStage.IsReceiveStage">
            <summary>
            Indicates if this is a stage of a receive pipeline
            </summary>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.SendPipelineWrapper">
            <summary>
            Wrapper around a send pipeline you can execute
            </summary>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.SendPipelineWrapper.Execute(Winterdom.BizTalk.PipelineTesting.MessageCollection)">
            <summary>
            Execute the send pipeline
            </summary>
            <param name="inputMessages">Set of input messages to feed to the pipeline</param>
            <returns>The output message</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.SendPipelineWrapper.Execute(Microsoft.BizTalk.Message.Interop.IBaseMessage[])">
            <summary>
            Executes the send pipeline with all messages
            provided as inputs
            </summary>
            <param name="inputMessages">One or more input messages to the pipeline</param>
            <returns>The single output message</returns>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.ReceivePipelineWrapper">
            <summary>
            Wrapper around a receive pipeline you can execute
            </summary>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.ReceivePipelineWrapper.Execute(Microsoft.BizTalk.Message.Interop.IBaseMessage)">
            <summary>
            Executes the receive pipeline
            </summary>
            <param name="inputMessage">Input message to feed to the pipeline</param>
            <returns>A collection of messages that were generated by the pipeline</returns>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.PipelineFactory">
            <summary>
            Factory class to create pipeline objects. 
            </summary>
            <remarks>
            This class can create either empty (with no components)
            Receive and Send pipelines, as well as initialize pipeline objects
            from the corresponding types in compiled BizTalk assemblies.
            </remarks>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.PipelineFactory.CreateEmptyReceivePipeline">
            <summary>
            Creates a receive pipeline with no components
            on any stage
            </summary>
            <returns>An empty receive pipeline</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.PipelineFactory.CreateReceivePipeline(System.Type)">
            <summary>
            Creates a receive pipeline from a given biztalk
            pipeline type
            </summary>
            <param name="type">BizTalk pipeline type</param>
            <returns>A receive Pipeline</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.PipelineFactory.CreateEmptySendPipeline">
            <summary>
            Creates a send pipeline with no components
            on any stage
            </summary>
            <returns>An empty send pipeline</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.PipelineFactory.CreateSendPipeline(System.Type)">
            <summary>
            Creates a send pipeline from a given biztalk
            pipeline type
            </summary>
            <param name="type">BizTalk pipeline type</param>
            <returns>A send Pipeline</returns>
        </member>
        <member name="T:Winterdom.BizTalk.PipelineTesting.MessageHelper">
            <summary>
            Helper class you can use to create 
            IBaseMessage instances to pass on
            to the pipeline testing classes
            </summary>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.MessageHelper.CreateFromString(System.String)">
            <summary>
            Creates a new message with the specified string
            as the body part.
            </summary>
            <param name="body">Content of the body</param>
            <returns>A new message</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.MessageHelper.CreateFromStream(System.IO.Stream)">
            <summary>
            Create a new message with the specified stream as 
            the body part.
            </summary>
            <param name="body">Body of the message</param>
            <returns>A new message object</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.MessageHelper.CreatePartFromString(System.String)">
            <summary>
            Creates a new message part with the specified data
            </summary>
            <param name="body">Data of the part</param>
            <returns>The new part</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.MessageHelper.CreatePartFromStream(System.IO.Stream)">
            <summary>
            Creates a new message part
            </summary>
            <param name="body">Body of the part</param>
            <returns>The new part</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.MessageHelper.Create(System.String[])">
            <summary>
            Creates a multi-part message from an array
            of strings. The first string in the array will be marked
            as the message body part
            </summary>
            <param name="parts">One string for each part</param>
            <returns>The new message</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.MessageHelper.Create(System.IO.Stream[])">
            <summary>
            Creates a multi-part message from an array
            of streams. The first stream in the array will be marked
            as the message body part
            </summary>
            <param name="parts">One stream for each part</param>
            <returns>The new message</returns>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.MessageHelper.ConsumeStream(System.IO.Stream)">
            <summary>
            Helper method to consume a stream
            </summary>
            <param name="stream">Stream to consume</param>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.MessageHelper.ConsumeStream(Microsoft.BizTalk.Message.Interop.IBaseMessage)">
            <summary>
            Helper method to consume the message body part stream
            </summary>
            <param name="message">Message to consume</param>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.MessageHelper.ConsumeStream(Microsoft.BizTalk.Message.Interop.IBaseMessagePart)">
            <summary>
            Helper method to consume the part stream
            </summary>
            <param name="part">Part to consume</param>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.MessageHelper.ReadString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Helper method to read back a stream as a string
            </summary>
            <param name="stream">Stream to consume</param>
            <param name="encoding">Expected encoding of the stream contents</param>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.MessageHelper.ReadString(Microsoft.BizTalk.Message.Interop.IBaseMessage)">
            <summary>
            Helper method to read back a stream as a string
            </summary>
            <param name="message">Message to consume</param>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.MessageHelper.ReadString(Microsoft.BizTalk.Message.Interop.IBaseMessagePart)">
            <summary>
            Helper method to read back a stream as a string
            </summary>
            <param name="part">Part to consume</param>
        </member>
        <member name="M:Winterdom.BizTalk.PipelineTesting.MessageHelper.LoadMessage(System.String)">
            <summary>
            Loads a BizTalk message from the set of files exported from
            the BizTalk Admin Console or HAT
            </summary>
            <param name="contextFile">Path to the *_context.xml file</param>
            <returns>The loaded message</returns>
            <remarks>
            Context files have no type information for properties
            in the message context, so all properties are 
            added as strings to the context.
            </remarks>
        </member>
    </members>
</doc>
